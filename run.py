#!/usr/bin/env python3
"""
Script de lancement pour l'Analyseur de Visages IA
Projet de Protection des Donn√©es
"""

import subprocess
import sys
import os
import argparse
import webbrowser
import time

def check_dependencies():
    """V√©rifie que les d√©pendances sont install√©es"""
    try:
        import streamlit
        import cv2
        import mediapipe
        import deepface
        import tensorflow
        print("‚úÖ Toutes les d√©pendances sont install√©es")
        return True
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("üì¶ Installez les d√©pendances avec: pip install -r requirements.txt")
        return False

def install_dependencies():
    """Installe les d√©pendances automatiquement"""
    print("üì¶ Installation des d√©pendances...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ D√©pendances install√©es avec succ√®s")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erreur lors de l'installation des d√©pendances")
        return False

def run_app(mode="main", port=8501, auto_open=True):
    """Lance l'application Streamlit"""
    
    # Mapping des modes vers les fichiers
    mode_files = {
        "main": "main_app.py",
        "mode1": "app_mode1.py", 
        "mode2": "app_mode2.py"
    }
    
    if mode not in mode_files:
        print(f"‚ùå Mode invalide: {mode}")
        print(f"Modes disponibles: {list(mode_files.keys())}")
        return False
    
    file_to_run = mode_files[mode]
    
    if not os.path.exists(file_to_run):
        print(f"‚ùå Fichier non trouv√©: {file_to_run}")
        return False
    
    print(f"üöÄ Lancement de l'application: {file_to_run}")
    print(f"üåê URL: http://localhost:{port}")
    print("‚èπÔ∏è  Appuyez sur Ctrl+C pour arr√™ter")
    
    # Ouvrir automatiquement le navigateur
    if auto_open:
        def open_browser():
            time.sleep(2)  # Attendre que le serveur d√©marre
            webbrowser.open(f"http://localhost:{port}")
        
        import threading
        threading.Thread(target=open_browser, daemon=True).start()
    
    try:
        # Lancer Streamlit
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", 
            file_to_run, 
            "--server.port", str(port),
            "--server.headless", "true" if not auto_open else "false"
        ])
    except KeyboardInterrupt:
        print("\nüëã Application arr√™t√©e")
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement: {e}")
        return False
    
    return True

def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(
        description="Analyseur de Visages IA - Protection des Donn√©es",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  python run.py                    # Lance l'application principale
  python run.py --mode mode1       # Lance le mode upload vid√©o
  python run.py --mode mode2       # Lance le mode temps r√©el
  python run.py --install          # Installe les d√©pendances
  python run.py --check            # V√©rifie les d√©pendances
        """
    )
    
    parser.add_argument(
        "--mode", 
        choices=["main", "mode1", "mode2"],
        default="main",
        help="Mode √† lancer (default: main)"
    )
    
    parser.add_argument(
        "--port",
        type=int,
        default=8501,
        help="Port pour le serveur Streamlit (default: 8501)"
    )
    
    parser.add_argument(
        "--no-browser",
        action="store_true",
        help="Ne pas ouvrir automatiquement le navigateur"
    )
    
    parser.add_argument(
        "--install",
        action="store_true",
        help="Installer les d√©pendances"
    )
    
    parser.add_argument(
        "--check",
        action="store_true",
        help="V√©rifier les d√©pendances"
    )
    
    args = parser.parse_args()
    
    # Affichage du header
    print("üé≠" + "="*60)
    print("    ANALYSEUR DE VISAGES IA - PROTECTION DES DONN√âES")
    print("="*63)
    print()
    
    # Avertissement RGPD
    print("‚ö†Ô∏è  AVERTISSEMENT RGPD:")
    print("   Cette application traite des donn√©es biom√©triques sensibles.")
    print("   Assurez-vous d'avoir le consentement appropri√© avant utilisation.")
    print()
    
    # Actions sp√©ciales
    if args.install:
        return install_dependencies()
    
    if args.check:
        return check_dependencies()
    
    # V√©rification des d√©pendances
    if not check_dependencies():
        response = input("Voulez-vous installer les d√©pendances maintenant? (y/N): ")
        if response.lower() in ['y', 'yes', 'oui']:
            if not install_dependencies():
                return False
        else:
            print("‚ùå Impossible de continuer sans les d√©pendances")
            return False
    
    # Lancement de l'application
    return run_app(
        mode=args.mode,
        port=args.port,
        auto_open=not args.no_browser
    )

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 