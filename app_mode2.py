import streamlit as st
import cv2
import numpy as np
from streamlit_webrtc import webrtc_streamer, VideoTransformerBase, RTCConfiguration
import av
from face_analyzer import FaceAnalyzer
import threading
import time
from collections import deque
import pandas as pd

# Configuration de la page
st.set_page_config(
    page_title="Analyseur de Visages - Mode Temps R√©el",
    page_icon="üìπ",
    layout="wide"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .info-box {
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .stats-container {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Configuration RTC pour WebRTC
RTC_CONFIGURATION = RTCConfiguration({
    "iceServers": [{"urls": ["stun:stun.l.google.com:19302"]}]
})

class VideoTransformer(VideoTransformerBase):
    def __init__(self):
        self.analyzer = None
        self.frame_count = 0
        self.detection_history = deque(maxlen=100)  # Garder les 100 derni√®res d√©tections
        self.fps_counter = deque(maxlen=30)  # Pour calculer les FPS
        self.last_time = time.time()
        self.initialize_analyzer()
    
    def initialize_analyzer(self):
        """Initialise l'analyseur de visages"""
        try:
            self.analyzer = FaceAnalyzer()
        except Exception as e:
            st.error(f"Erreur lors de l'initialisation: {e}")
            self.analyzer = None
    
    def recv(self, frame):
        """Traite chaque frame de la webcam"""
        img = frame.to_ndarray(format="bgr24")
        
        if self.analyzer is None:
            return av.VideoFrame.from_ndarray(img, format="bgr24")
        
        try:
            # Calculer les FPS
            current_time = time.time()
            self.fps_counter.append(current_time - self.last_time)
            self.last_time = current_time
            
            # Traiter la frame
            annotated_frame, faces_data = self.analyzer.process_frame(img)
            
            # Sauvegarder les d√©tections
            if faces_data:
                detection_data = {
                    'timestamp': current_time,
                    'frame': self.frame_count,
                    'faces_count': len(faces_data),
                    'faces': faces_data
                }
                self.detection_history.append(detection_data)
            
            # Ajouter les informations FPS sur l'image
            if len(self.fps_counter) > 1:
                avg_frame_time = sum(self.fps_counter) / len(self.fps_counter)
                fps = 1.0 / avg_frame_time if avg_frame_time > 0 else 0
                cv2.putText(annotated_frame, f"FPS: {fps:.1f}", (10, 30), 
                           cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            
            # Ajouter le nombre de visages d√©tect√©s
            cv2.putText(annotated_frame, f"Visages: {len(faces_data)}", (10, 70), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            
            self.frame_count += 1
            
            return av.VideoFrame.from_ndarray(annotated_frame, format="bgr24")
            
        except Exception as e:
            # En cas d'erreur, retourner la frame originale
            cv2.putText(img, f"Erreur: {str(e)[:50]}", (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
            return av.VideoFrame.from_ndarray(img, format="bgr24")

def main():
    # Titre principal
    st.markdown('<h1 class="main-header">üìπ Analyseur de Visages - Temps R√©el</h1>', unsafe_allow_html=True)
    
    # Avertissement sur la protection des donn√©es
    st.markdown("""
    <div class="warning-box">
        <h3>‚ö†Ô∏è Avertissement - Protection des Donn√©es</h3>
        <p>Cette application analyse en temps r√©el les caract√©ristiques biom√©triques des visages. 
        Les donn√©es trait√©es sont sensibles selon le RGPD. Assurez-vous d'avoir les autorisations 
        n√©cessaires avant d'utiliser cette fonctionnalit√©.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar avec contr√¥les
    with st.sidebar:
        st.header("üéõÔ∏è Contr√¥les")
        
        # Param√®tres de d√©tection
        st.subheader("Param√®tres de D√©tection")
        confidence_threshold = st.slider(
            "Seuil de confiance", 
            min_value=0.1, 
            max_value=1.0, 
            value=0.5, 
            step=0.1
        )
        
        # Options d'affichage
        st.subheader("Options d'Affichage")
        show_age = st.checkbox("Afficher l'√¢ge", value=True)
        show_gender = st.checkbox("Afficher le genre", value=True)
        show_emotion = st.checkbox("Afficher l'√©motion", value=True)
        show_race = st.checkbox("Afficher l'ethnie", value=True)
        
        # Informations sur la performance
        st.subheader("üìä Performance")
        st.info("""
        **Optimisations appliqu√©es :**
        - Traitement adaptatif selon les performances
        - Cache des mod√®les ML
        - R√©duction de r√©solution si n√©cessaire
        """)
        
        # Consid√©rations l√©gales
        st.subheader("‚öñÔ∏è Aspects L√©gaux")
        st.warning("""
        **Points d'attention RGPD :**
        - Consentement explicite requis
        - Donn√©es biom√©triques = cat√©gorie sp√©ciale
        - Droit √† l'effacement applicable
        - Minimisation des donn√©es
        """)
    
    # Interface principale
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üì∑ Flux Vid√©o en Temps R√©el")
        
        # Instructions
        st.markdown("""
        <div class="info-box">
            <p>üé• Cliquez sur "START" pour commencer l'analyse en temps r√©el de votre webcam.</p>
            <p>üì± Pour utiliser votre t√©l√©phone comme cam√©ra, vous pouvez utiliser des applications comme DroidCam ou IP Webcam.</p>
        </div>
        """, unsafe_allow_html=True)
        
        # WebRTC streamer
        webrtc_ctx = webrtc_streamer(
            key="face-analysis",
            video_transformer_factory=VideoTransformer,
            rtc_configuration=RTC_CONFIGURATION,
            media_stream_constraints={"video": True, "audio": False},
            async_processing=True,
        )
    
    with col2:
        st.header("üìà Statistiques en Temps R√©el")
        
        # Conteneur pour les statistiques qui se mettent √† jour
        stats_container = st.empty()
        
        # Conteneur pour l'historique des d√©tections
        history_container = st.empty()
        
        # Bouton pour effacer l'historique
        if st.button("üóëÔ∏è Effacer l'Historique"):
            if webrtc_ctx.video_transformer:
                webrtc_ctx.video_transformer.detection_history.clear()
                st.success("Historique effac√©!")
    
    # Mise √† jour des statistiques en temps r√©el
    if webrtc_ctx.video_transformer:
        update_real_time_stats(webrtc_ctx.video_transformer, stats_container, history_container)
    
    # Section d'aide
    st.markdown("---")
    st.header("üì± Utilisation avec T√©l√©phone")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        ### Option 1: DroidCam
        1. Installez DroidCam sur votre t√©l√©phone
        2. Installez le client DroidCam sur votre PC
        3. Connectez via WiFi ou USB
        4. S√©lectionnez DroidCam comme source vid√©o
        """)
    
    with col2:
        st.markdown("""
        ### Option 2: IP Webcam
        1. Installez IP Webcam sur Android
        2. D√©marrez le serveur dans l'app
        3. Notez l'adresse IP affich√©e
        4. Utilisez l'URL dans votre navigateur
        """)
    
    # Section de protection des donn√©es
    st.markdown("---")
    st.header("üîí Protection des Donn√©es - Mode Temps R√©el")
    
    st.markdown("""
    <div class="warning-box">
        <h4>Sp√©cificit√©s du traitement en temps r√©el :</h4>
        <ul>
            <li>üîÑ <strong>Traitement continu</strong> - Les donn√©es sont analys√©es en permanence</li>
            <li>üíæ <strong>Stockage temporaire</strong> - Historique limit√© aux 100 derni√®res d√©tections</li>
            <li>üö´ <strong>Pas d'enregistrement</strong> - Aucune vid√©o n'est sauvegard√©e par d√©faut</li>
            <li>‚ö° <strong>Traitement local</strong> - Toutes les analyses se font sur votre machine</li>
        </ul>
        
        <h4>Mesures de protection :</h4>
        <ul>
            <li>‚úÖ Effacement automatique de l'historique</li>
            <li>‚úÖ Aucune transmission de donn√©es vers des serveurs externes</li>
            <li>‚úÖ Contr√¥le total sur l'activation/d√©sactivation</li>
            <li>‚úÖ Transparence sur les donn√©es collect√©es</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

def update_real_time_stats(transformer, stats_container, history_container):
    """Met √† jour les statistiques en temps r√©el"""
    
    with stats_container.container():
        if hasattr(transformer, 'detection_history') and transformer.detection_history:
            # Statistiques g√©n√©rales
            total_detections = len(transformer.detection_history)
            total_faces = sum(d['faces_count'] for d in transformer.detection_history)
            
            # Calculer les FPS moyens
            if hasattr(transformer, 'fps_counter') and len(transformer.fps_counter) > 1:
                avg_frame_time = sum(transformer.fps_counter) / len(transformer.fps_counter)
                avg_fps = 1.0 / avg_frame_time if avg_frame_time > 0 else 0
            else:
                avg_fps = 0
            
            # Afficher les m√©triques
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Frames trait√©es", total_detections)
            
            with col2:
                st.metric("Visages d√©tect√©s", total_faces)
            
            with col3:
                st.metric("FPS moyen", f"{avg_fps:.1f}")
            
            # Derni√®res d√©tections
            if transformer.detection_history:
                latest_detection = transformer.detection_history[-1]
                
                st.markdown("### üîç Derni√®re D√©tection")
                
                if latest_detection['faces']:
                    for i, face in enumerate(latest_detection['faces']):
                        if face['attributes']:
                            st.markdown(f"""
                            **Visage {i+1}:**
                            - üéÇ √Çge: {face['attributes']['age']}
                            - ‚ößÔ∏è Genre: {face['attributes']['gender']}
                            - üåç Ethnie: {face['attributes']['race']}
                            - üòä √âmotion: {face['attributes']['emotion']}
                            """)
                else:
                    st.info("Aucun visage d√©tect√© dans la derni√®re frame")
        
        else:
            st.info("En attente de d√©tections...")
    
    # Historique des d√©tections
    with history_container.container():
        if hasattr(transformer, 'detection_history') and transformer.detection_history:
            st.markdown("### üìä Historique des D√©tections")
            
            # Cr√©er un DataFrame avec l'historique
            history_data = []
            for detection in list(transformer.detection_history)[-20:]:  # 20 derni√®res
                timestamp = time.strftime("%H:%M:%S", time.localtime(detection['timestamp']))
                history_data.append({
                    'Heure': timestamp,
                    'Frame': detection['frame'],
                    'Visages': detection['faces_count']
                })
            
            if history_data:
                df = pd.DataFrame(history_data)
                st.dataframe(df, use_container_width=True, height=200)
                
                # Graphique des d√©tections dans le temps
                if len(history_data) > 1:
                    st.line_chart(df.set_index('Heure')['Visages'])

if __name__ == "__main__":
    main() 