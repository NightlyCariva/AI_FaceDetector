#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'installation de l'Analyseur de Visages IA
Projet de Protection des Donn√©es
"""

import sys
import importlib
import subprocess
import platform
import cv2
import numpy as np

def test_python_version():
    """Teste la version de Python"""
    print("üêç Test de la version Python...")
    version = sys.version_info
    
    if version.major == 3 and version.minor >= 8:
        print(f"   ‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(f"   ‚ùå Python {version.major}.{version.minor}.{version.micro} - Version trop ancienne")
        print("   üìã Python 3.8+ requis")
        return False

def test_dependencies():
    """Teste l'installation des d√©pendances"""
    print("\nüì¶ Test des d√©pendances...")
    
    dependencies = [
        ("opencv-python", "cv2"),
        ("mediapipe", "mediapipe"),
        ("tensorflow", "tensorflow"),
        ("streamlit", "streamlit"),
        ("deepface", "deepface"),
        ("pandas", "pandas"),
        ("numpy", "numpy"),
        ("Pillow", "PIL"),
        ("streamlit-webrtc", "streamlit_webrtc"),
    ]
    
    results = []
    
    for package_name, import_name in dependencies:
        try:
            module = importlib.import_module(import_name)
            version = getattr(module, '__version__', 'Version inconnue')
            print(f"   ‚úÖ {package_name} ({version}) - OK")
            results.append(True)
        except ImportError:
            print(f"   ‚ùå {package_name} - Non install√©")
            results.append(False)
        except Exception as e:
            print(f"   ‚ö†Ô∏è  {package_name} - Erreur: {e}")
            results.append(False)
    
    return all(results)

def test_opencv_functionality():
    """Teste les fonctionnalit√©s OpenCV"""
    print("\nüì∑ Test des fonctionnalit√©s OpenCV...")
    
    try:
        # Test de cr√©ation d'image
        img = np.zeros((100, 100, 3), dtype=np.uint8)
        
        # Test de d√©tection de contours
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        
        # Test d'√©criture de texte
        cv2.putText(img, "Test", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
        
        print("   ‚úÖ Fonctionnalit√©s OpenCV - OK")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur OpenCV: {e}")
        return False

def test_mediapipe():
    """Teste MediaPipe"""
    print("\nüé≠ Test de MediaPipe...")
    
    try:
        import mediapipe as mp
        
        # Test d'initialisation de la d√©tection de visages
        mp_face_detection = mp.solutions.face_detection
        face_detection = mp_face_detection.FaceDetection(
            model_selection=0, 
            min_detection_confidence=0.5
        )
        
        # Test avec une image factice
        img = np.zeros((480, 640, 3), dtype=np.uint8)
        rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        results = face_detection.process(rgb_img)
        
        print("   ‚úÖ MediaPipe - OK")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur MediaPipe: {e}")
        return False

def test_tensorflow():
    """Teste TensorFlow"""
    print("\nüß† Test de TensorFlow...")
    
    try:
        import tensorflow as tf
        
        # Supprimer les logs verbeux
        tf.get_logger().setLevel('ERROR')
        
        # Test simple
        x = tf.constant([[1.0, 2.0], [3.0, 4.0]])
        y = tf.constant([[1.0], [1.0]])
        result = tf.matmul(x, y)
        
        print(f"   ‚úÖ TensorFlow {tf.__version__} - OK")
        
        # V√©rifier GPU
        if tf.config.list_physical_devices('GPU'):
            print("   üöÄ GPU d√©tect√© - Acc√©l√©ration disponible")
        else:
            print("   üíª CPU uniquement - Pas de GPU d√©tect√©")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur TensorFlow: {e}")
        return False

def test_deepface():
    """Teste DeepFace"""
    print("\nüîç Test de DeepFace...")
    
    try:
        from deepface import DeepFace
        
        # Cr√©er une image de test simple
        test_img = np.random.randint(0, 255, (224, 224, 3), dtype=np.uint8)
        
        # Test d'analyse (peut √©chouer sur l'image al√©atoire, c'est normal)
        try:
            result = DeepFace.analyze(
                test_img, 
                actions=['emotion'], 
                enforce_detection=False,
                silent=True
            )
            print("   ‚úÖ DeepFace - OK (analyse r√©ussie)")
        except:
            print("   ‚úÖ DeepFace - OK (module charg√©)")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur DeepFace: {e}")
        return False

def test_streamlit():
    """Teste Streamlit"""
    print("\nüåê Test de Streamlit...")
    
    try:
        import streamlit as st
        print(f"   ‚úÖ Streamlit {st.__version__} - OK")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur Streamlit: {e}")
        return False

def test_system_info():
    """Affiche les informations syst√®me"""
    print("\nüíª Informations syst√®me:")
    print(f"   OS: {platform.system()} {platform.release()}")
    print(f"   Architecture: {platform.machine()}")
    print(f"   Processeur: {platform.processor()}")
    
    # M√©moire disponible (si psutil est disponible)
    try:
        import psutil
        memory = psutil.virtual_memory()
        print(f"   RAM: {memory.total // (1024**3)} GB (disponible: {memory.available // (1024**3)} GB)")
    except ImportError:
        print("   RAM: Information non disponible (psutil non install√©)")

def test_file_structure():
    """V√©rifie la structure des fichiers"""
    print("\nüìÅ Test de la structure des fichiers...")
    
    required_files = [
        "main_app.py",
        "app_mode1.py", 
        "app_mode2.py",
        "face_analyzer.py",
        "requirements.txt",
        "config.py",
        "README.md"
    ]
    
    missing_files = []
    
    for file in required_files:
        try:
            with open(file, 'r'):
                print(f"   ‚úÖ {file} - Pr√©sent")
        except FileNotFoundError:
            print(f"   ‚ùå {file} - Manquant")
            missing_files.append(file)
    
    return len(missing_files) == 0

def run_all_tests():
    """Ex√©cute tous les tests"""
    print("üé≠" + "="*60)
    print("    TEST D'INSTALLATION - ANALYSEUR DE VISAGES IA")
    print("="*63)
    
    tests = [
        ("Version Python", test_python_version),
        ("D√©pendances", test_dependencies),
        ("OpenCV", test_opencv_functionality),
        ("MediaPipe", test_mediapipe),
        ("TensorFlow", test_tensorflow),
        ("DeepFace", test_deepface),
        ("Streamlit", test_streamlit),
        ("Structure des fichiers", test_file_structure),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"   ‚ùå Erreur inattendue dans {test_name}: {e}")
            results.append((test_name, False))
    
    # Afficher les informations syst√®me
    test_system_info()
    
    # R√©sum√©
    print("\n" + "="*63)
    print("üìä R√âSUM√â DES TESTS")
    print("="*63)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHEC"
        print(f"   {test_name:<25} {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ R√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Installation compl√®te et fonctionnelle!")
        print("\nüöÄ Vous pouvez maintenant lancer l'application avec:")
        print("   python run.py")
        print("   ou")
        print("   streamlit run main_app.py")
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez l'installation.")
        print("\nüìã Pour installer les d√©pendances manquantes:")
        print("   pip install -r requirements.txt")
    
    return passed == total

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1) 